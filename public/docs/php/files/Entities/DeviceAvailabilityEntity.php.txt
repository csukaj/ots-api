<?php

namespace App\Entities;

use App\Device;
use App\DeviceAvailability;
use App\Facades\Config;
use App\Manipulators\DeviceAvailabilitySetter;
use DateInterval;
use DateTime;

class DeviceAvailabilityEntity {

    public $deviceId;

    public function __construct($deviceId) {
        $this->deviceId = $deviceId;
    }

    /**
     * Gets all availabilities of a device between two dates, returns a daily breakdown
     * @return array
     */
    public function get($fromDate, $toDate) {
        $dailyAvailabilities = [];
        
        $availabilities = DeviceAvailability::getAvailabilitiesInInterval($this->deviceId, $fromDate, $toDate);
        $toTime = new DateTime($toDate . ' ' . Config::get('ots.midday_separation_time'));
        
        $iterationTime = new DateTime($fromDate . ' ' . Config::get('ots.midday_separation_time'));
        $availability = null;
        $availabilityFromTime = null;
        $availabilityToTime = null;
        
        do {
            if (is_null($availabilityFromTime) || (!is_null($availabilityToTime) && $availabilityToTime <= $iterationTime)) {
                $availability = array_shift($availabilities);
                $availabilityFromTime = is_null($availability) ? null : new DateTime($availability->from_time);
                $availabilityToTime = (is_null($availability) || is_null($availability->to_time)) ? null : new DateTime($availability->to_time);
                $availabilityAmount = is_null($availability) ? 0 : $availability->amount;
            }
            
            $amount = ($availabilityFromTime <= $iterationTime && (is_null($availabilityToTime) || $availabilityToTime > $iterationTime)) ? $availabilityAmount : 0;
            $dailyAvailabilities[] = [
                'year' => (int)$iterationTime->format('Y'),
                'month' => (int)$iterationTime->format('m'),
                'day' => (int)$iterationTime->format('d'),
                'amount' => (int)$amount
            ];
            
            $iterationTime->add(new DateInterval('P1D'));
        } while ($iterationTime <= $toTime);
        
        return $dailyAvailabilities;
    }
    
    /**
     * Sets new availabilities using a request of daily breakdowns
     * @param array $dailyAvailabilitiesRequest
     * @return boolean
     */
    public function set(array $dailyAvailabilitiesRequest) {
        foreach ($this->parseAndMergeDailyAvailabilitiesRequest($dailyAvailabilitiesRequest) as $availabilityData) {
            $setter = new DeviceAvailabilitySetter($availabilityData);
            $setter->set();
        }
        return true;
    }
    
    public function decrease($fromDate, $toDate, $amount) {
        $availabilityMode = Device::findOrFail($this->deviceId)->organization->getAvailabilityMode();
        $availabilityModeValueTxName = $availabilityMode ? $availabilityMode->valueTaxonomy->name : null;
        if ($availabilityModeValueTxName == 'exact') {
            $dailyAvailabilities = $this->get($fromDate, $toDate);
            if (empty($dailyAvailabilities)) {
                return false;
            }
            foreach ($dailyAvailabilities as &$dailyAvailability) {
                $dailyAvailability['amount'] -= $amount;
            }
            $this->set($dailyAvailabilities);
            return true;
        }
        return false;
    }
    
    /**
     * Merges daily breakdowns into long intervals and parses request data into setter-ready format
     * @param array $dailyAvailabilitiesRequest
     * @return array
     */
    protected function parseAndMergeDailyAvailabilitiesRequest(array $dailyAvailabilitiesRequest) {
        $availabilitiesData = [];
        foreach ($dailyAvailabilitiesRequest as $dailyAvailabilityRequest) {
            $dailyAvailabilityData = $this->parseAvailabilityRequest($dailyAvailabilityRequest);
            
            if (empty($availabilitiesData)) {
                array_push($availabilitiesData, $dailyAvailabilityData);
                continue;
            }
            
            $lastAvailabilityData = array_pop($availabilitiesData);
            if ($dailyAvailabilityData['fromDate'] == $lastAvailabilityData['toDate'] && $dailyAvailabilityData['amount'] == $lastAvailabilityData['amount']) {
                $lastAvailabilityData['toDate'] = $dailyAvailabilityData['toDate'];
                array_push($availabilitiesData, $lastAvailabilityData);
            } else {
                array_push($availabilitiesData, $lastAvailabilityData);
                array_push($availabilitiesData, $dailyAvailabilityData);
            }
        }
        return $availabilitiesData;
    }
    
    /**
     * Parses request data into setter-ready format
     * @param array $availabilityRequest
     * @return array
     */
    protected function parseAvailabilityRequest(array $availabilityRequest) {
        $date = (new DateTime())->setDate($availabilityRequest['year'], $availabilityRequest['month'], $availabilityRequest['day']);
        return [
            'deviceId' => $this->deviceId,
            'fromDate' => $date->format('Y-m-d'),
            'toDate'   => $date->add(new DateInterval('P1D'))->format('Y-m-d'),
            'amount'   => $availabilityRequest['amount']
        ];
    }

}

