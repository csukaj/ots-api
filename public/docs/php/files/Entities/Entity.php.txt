<?php

namespace App\Entities;

use App\DeviceDescription;
use App\OrganizationDescription;
use App\PlaceDescription;
use App\ProgramDescription;
use Modules\Stylerstaxonomy\Entities\Description;
use Modules\Stylerstaxonomy\Entities\DescriptionEntity;
use Modules\Stylerstaxonomy\Entities\Taxonomy;
use Modules\Stylerstaxonomy\Entities\TaxonomyEntity;

class Entity {

    public function __construct() {
        //
    }
    
    protected function filterAdditions(array $additions, array $config) {
        $filteredAdditions = [];
        foreach ($config as $parentAddition => $childAddition) {
            if (is_numeric($parentAddition)) {
                $filteredAdditions[] = $childAddition;
            } elseif (in_array($parentAddition, $additions)) {
                $filteredAdditions[] = $childAddition;
            }
        }
        return $filteredAdditions;
    }
    
    protected function getTaxonomyTranslation(Taxonomy $taxonomy) {
        return (new TaxonomyEntity($taxonomy))->translations();
    }
    
    protected function getDescriptionWithTranslationsData(Description $description) {
        return (new DescriptionEntity($description))->getFrontendData();
    }
    
    protected function getEntityDescriptionsData($modelId, $taxonomyId) {
        switch (static::MODEL_TYPE) {
            case 'device':
                $modelDescription = new DeviceDescription();
                $localKey = 'device_id';
                break;
            case 'organization':
                $modelDescription = new OrganizationDescription();
                $localKey = 'organization_id';
                break;
            case 'place':
                $modelDescription = new PlaceDescription();
                $localKey = 'place_id';
                break;
            case 'program':
                $modelDescription = new ProgramDescription();
                $localKey = 'program_id';
                break;
        }
        
        $modelDescriptions = $modelDescription->where($localKey, $modelId)->get();
        $descriptionTypeTxs = Taxonomy::find($taxonomyId)->getChildren();
        
        $return = [];
        foreach ($descriptionTypeTxs as $descriptionTypeTx) {
            foreach ($modelDescriptions as $modelDescription) {
                if ($modelDescription->taxonomy_id == $descriptionTypeTx->id) {
                    $return[$descriptionTypeTx->name] = $this->getDescriptionWithTranslationsData($modelDescription->description);
                    continue;
                }
            }
        }

        return $return;
    }

    static protected function getTaxonomyTree($rootTxId) {
        return TaxonomyEntity::getCollection(Taxonomy::findOrFail($rootTxId)->getChildren(), ['descendants', 'translations']);
    }

    static public function getCollection($models, array $additions = []) {
        $return = [];
        foreach ($models as $model) {
            $return[] = (new static($model))->getFrontendData($additions);
        }
        return $return;
    }
}
