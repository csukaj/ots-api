<?php

namespace App\Entities;

class CartEntity {

    public $elements;
    private $pivotElementToSearch = [];

    public function __construct(array $data) {
        foreach ($data as $key => $value) {
            if (property_exists($this, $key)) {
                $this->$key = $value;
            }
        }
    }
    
    public function update() {
        $hotelSearchRequests = $this->getHotelSearchRequests();
        
        $searchResults = [];
        foreach ($hotelSearchRequests as $hotelSearchRequest) {
            $hotelSearchEn = new HotelSearchEntity();
            $hotelSearchEn->setParameters($hotelSearchRequest);
            $searchResults[] = $hotelSearchEn->getFrontendData(['availability', 'frontend']);
        }
        
        foreach ($this->pivotElementToSearch as $cartElementKey => $searchResultKey) {
            $this->elements[$cartElementKey]->update($searchResults[$searchResultKey]);
        }
        
        return $this;
    }
    
    private function getHotelSearchRequests() {
        $cartSummary = $this->getCartSummary();
        $this->pivotElementToSearch = [];
        
        $hotelSearchRequests = [];
        foreach ($this->elements as $cartElementKey => $cartElement) {
            $found = false;
            foreach ($hotelSearchRequests as $hotelSearchRequestKey => $hotelSearchRequest) {
                if ($hotelSearchRequest == $cartElement->hotelSearchRequest) {
                    $found = true;
                    $this->pivotElementToSearch[$cartElementKey] = $hotelSearchRequestKey;
                }
            }
            if (!$found) {
                $hotelSearchRequest = $cartElement->hotelSearchRequest;
                $hotelSearchRequest['cart_summary'] = $cartSummary;
                $hotelSearchRequests[] = $hotelSearchRequest;
                $this->pivotElementToSearch[$cartElementKey] = count($hotelSearchRequests) - 1;
            }
        }
        
        return $hotelSearchRequests;
    }
    
    private function getCartSummary() {
        $cartSummary = [];
        foreach ($this->elements as $cartElement) {
            $cartSummary[] = [
                'organization_id' => $cartElement->organization['id'],
                'device_id' => $cartElement->device['id'],
                'meal_plan' => $cartElement->mealPlan,
                'interval' => $cartElement->interval,
                'amount' => $cartElement->amount,
                'order_itemable_index' => $cartElement->orderItemableIndex,
                'usage_request' => $cartElement->hotelSearchRequest['rooms'][$cartElement->orderItemableIndex]['usage']
            ];
        }
        return $cartSummary;
    }

}

