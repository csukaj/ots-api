<?php

namespace App;

use Carbon\Carbon;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\SoftDeletes;

/**
 * App\ContentModification
 *
 * @property int $id
 * @property int $content_id
 * @property int $editor_user_id
 * @property string $new_content
 * @property \Carbon\Carbon $created_at
 * @property \Carbon\Carbon $updated_at
 * @property string $deleted_at
 * @property-read \App\Content $content
 * @property-read \App\User $editor
 * @mixin \Eloquent
 */
class ContentModification extends Model {

    use SoftDeletes,
        ModelValidatorTrait;

    /**
     * The attributes that are mass assignable.
     *
     * @var array
     */
    protected $fillable = ['content_id', 'editor_user_id', 'new_content'];

    /**
     * Relation to content
     * 
     * @return HasOne
     */
    public function content() {
        return $this->hasOne(Content::class, 'id', 'content_id');
    }

    /**
     * Relation to editor user
     * 
     * @return HasOne
     */
    public function editor() {
        return $this->hasOne(User::class, 'id', 'editor_user_id');
    }

    /**
     * Scope a query to only include modifications of specified content
     *
     * @param Builder $query query to scope to
     * @return Builder
     */
    public function scopeForContent($query, $contentId) {
        return $query->where('content_id', '=', $contentId);
    }

    /**
     * Scope a query to only include modifications of specified user.
     *
     * @param Builder $query query to scope to
     * @return Builder
     */
    public function scopeByEditor($query, $editorUserId) {
        return $query->where('editor_user_id', '=', $editorUserId);
    }

    /**
     * get CreatedAt Attribute 
     * 
     * @param string $date
     * @return string
     */
    public function getCreatedAtAttribute($date) {
        return Carbon::createFromFormat('Y-m-d H:i:s', $date)->format('Y-m-d H:i:s');
    }

}

