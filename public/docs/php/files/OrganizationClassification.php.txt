<?php

namespace App;

use Carbon\Carbon;
use Illuminate\Database\Eloquent\Collection;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Relations\HasMany;
use Illuminate\Database\Eloquent\Relations\HasOne;
use Illuminate\Database\Eloquent\SoftDeletes;
use Illuminate\Database\Query\Builder;
use Modules\Stylerstaxonomy\Entities\ClassificationTrait;
use Modules\Stylerstaxonomy\Entities\Description;
use Modules\Stylerstaxonomy\Entities\Taxonomy;

/**
 * App\OrganizationClassification
 *
 * @property int $id
 * @property int $organization_id
 * @property int $parent_classification_id
 * @property int $classification_taxonomy_id
 * @property int $value_taxonomy_id
 * @property int $priority
 * @property int $charge_taxonomy_id
 * @property int $additional_description_id
 * @property bool $is_highlighted
 * @property bool $is_listable
 * @property Carbon $created_at
 * @property Carbon $updated_at
 * @property string $deleted_at
 * @property-read Description $additionalDescription
 * @property-read Taxonomy $chargeTaxonomy
 * @property-read Collection|OrganizationClassification[] $childClassifications
 * @property-read Collection|OrganizationMeta[] $childMetas
 * @property-read Taxonomy $classificationTaxonomy
 * @property-read Organization $organization
 * @property-read OrganizationClassification $parentClassification
 * @property-read Taxonomy $priceTaxonomy
 * @property-read Taxonomy $valueTaxonomy
 * @mixin \Eloquent
 */
class OrganizationClassification extends Model {

    use SoftDeletes,
        ModelValidatorTrait,
        ClassificationTrait;

    protected $table = 'organization_classifications';

    /**
     * The attributes that are mass assignable.
     *
     * @var array
     */
    protected $fillable = [
        'organization_id',
        'parent_classification_id',
        'classification_taxonomy_id',
        'value_taxonomy_id',
        'priority',
        'charge_taxonomy_id',
        'additional_description_id',
        'is_highlighted',
        'is_listable'
    ];

    /**
     * Save the model to the database.
     * Sets priority by classification taxonomy priority
     *
     * @param  array $options
     * @return bool
     */
    public function save(array $options = []): bool {
        if (is_null($this->priority)) {
            $tx = Taxonomy::findOrFail(isset($options['classification_taxonomy_id']) ? $options['classification_taxonomy_id'] : $this->classification_taxonomy_id);
            $this->priority = $tx->priority;
            if (!empty($options)) {
                $options['priority'] = $this->priority;
            }
        }
        return parent::save($options);
    }

    /**
     * Relation to organization
     * 
     * @return HasOne
     */
    public function organization() {
        return $this->hasOne(Organization::class, 'id', 'organization_id');
    }

    /**
     * Relation to parent Classification
     * 
     * @return HasOne
     */
    public function parentClassification() {
        return $this->hasOne(OrganizationClassification::class, 'id', 'parent_classification_id');
    }

    /**
     * Relation to classificationTaxonomy
     * 
     * @return HasOne
     */
    public function classificationTaxonomy() {
        return $this->hasOne(Taxonomy::class, 'id', 'classification_taxonomy_id');
    }

    /**
     * Relation to value Taxonomy
     * 
     * @return HasOne
     */
    public function valueTaxonomy() {
        return $this->hasOne(Taxonomy::class, 'id', 'value_taxonomy_id');
    }

    /**
     * Relation to charge Taxonomy
     * 
     * @return HasOne
     */
    public function chargeTaxonomy() {
        return $this->hasOne(Taxonomy::class, 'id', 'charge_taxonomy_id');
    }

    /**
     * Relation to child Classifications
     * 
     * @return HasMany
     */
    public function childClassifications() {
        return $this->hasMany(OrganizationClassification::class, 'parent_classification_id', 'id')->orderBy('priority');
    }

    /**
     * Relation to listable Child Classifications ordered by priority
     * 
     * @return Builder
     */
    public function listableChildClassifications() {
        return $this->childClassifications()->listable()->orderBy('priority');
    }

    /**
     * Relation to child Metas
     * 
     * @return HasMany
     */
    public function childMetas() {
        return $this->hasMany(OrganizationMeta::class, 'parent_classification_id', 'id')->orderBy('priority');
    }

    /**
     * Relation to listable Child Metas ordered by priority
     * 
     * @return HasOne
     */
    public function listableChildMetas() {
        return $this->childMetas()->listable()->orderBy('priority');
    }

    /**
     * Scope a query to only include listable classifications.
     *
     * @param Builder $query query to scope to
     * @return Builder
     */
    public function scopeListable($query) {
        return $query->where('is_listable', '=', true);
    }

    /**
     * Scope a query to only include searchable classifications. 
     * (where taxonomy is searchable)
     *
     * @param Builder $query query to scope to
     * @return Builder
     */
    public function scopeSearchable($query) {
        $txSearchables = Taxonomy::searchable()->pluck('id')->toArray();
        return $query->whereIn('classification_taxonomy_id', $txSearchables);
    }

    /**
     * Scope a query to only include classifications having specified parent.
     *
     * @param Builder $query query to scope to
     * @param int $parent_classification_id parent id
     * @return Builder
     */
    public function scopeForParent($query, $parent_classification_id = null) {
        return is_null($parent_classification_id) ? $query->whereNull('parent_classification_id') : $query->where('parent_classification_id', '=', $parent_classification_id);
    }

    /**
     * Find OrganizationClassification in list and returns list key of found element
     * @param int $id
     * @param Collection|OrganizationClassification[] $orgCls
     * @return mixed
     * @static
     */
    static public function findKeyById($id, $orgCls) {
        foreach ($orgCls as $key => $orgCl) {
            if ($orgCl->id == $id) {
                return $key;
            }
        }
        return null;
    }

    /**
     * Find OrganizationClassification by taxonomy id at organization
     * or fail
     * 
     * @param int $clTxId classification taxonomy id
     * @param int $orgId organization id
     * @return OrganizationClassification
     */
    static public function findByTaxonomyAndOrganization(int $clTxId, int $orgId): OrganizationClassification {
        return self::where('classification_taxonomy_id', $clTxId)
                        ->where('organization_id', $orgId)
                        ->firstOrFail();
    }

}

