<?php

namespace App\Console\Commands\TestOrganizationSeeder;

use App\Device;
use App\PriceModifier;
use App\PriceModifierClassification;
use App\PriceModifierCombination;
use App\PriceModifierMeta;
use App\PriceModifierPeriod;
use App\MealPlan;
use App\OfferClassification;
use App\OfferMeta;
use App\OrganizationDateRange;
use Illuminate\Support\Facades\Config;
use Modules\Stylerstaxonomy\Entities\Taxonomy;
use Modules\Stylerstaxonomy\Manipulators\DescriptionSetter;

/**
 * Seeds discounts to database
 */
class TestDiscountSeeder {

    /**
     * Execute the console command.
     *
     * @return mixed
     */
    public function seed($organizationId, array $hotelData, array $dateRangeRelativeIds) {
        $discountIds = [];
        $orgIds = [];
        foreach ($hotelData['discounts'] as $discountData) {
            $discountIds[$discountData['relative_id']] = $this->setDiscount($organizationId, $discountData, $dateRangeRelativeIds)->id;
            $orgIds[$discountData['organization_id']] = $organizationId;
        }

        foreach ($hotelData['discount_combinations'] as $data) {
            $this->setCombinations($data, $discountIds);
        }
        
        // refresh discount order by predefined priority
        foreach ($orgIds as $organizationId) {
            $this->updateOrganizationDiscountPriorities($organizationId);
        }
    }

    /**
     * Sets a discount with all associated data
     * 
     * @param int $organizationId
     * @param array $discountData
     * @param array $dateRangeRelativeIds
     * @return Discount
     */
    private function setDiscount(int $organizationId, array $discountData, array $dateRangeRelativeIds) {
        if (isset($discountData['name'])) {
            $nameDescription = (new DescriptionSetter($discountData['name']))->set();
            $discountData['name_description_id'] = $nameDescription->id;
        }

        if (isset($discountData['description'])) {
            $descriptionDescription = (new DescriptionSetter($discountData['description']))->set();
            $discountData['description_description_id'] = $descriptionDescription->id;
        }

        $typeTx = Taxonomy::getTaxonomyGrandChild($discountData['type'], Config::get('taxonomies.discount_application_level'));
        $offerTx = Taxonomy::getTaxonomy($discountData['offer']['name'], Config::get('taxonomies.discount_offer'));

        $discount = new Discount($discountData);
        $discount->type_taxonomy_id = $typeTx->id;
        $discount->offer_taxonomy_id = $offerTx->id;
        $discount->promo_code = (!empty($discountData['promo_code'])) ? $discountData['promo_code'] : null;
        $discount->is_active = (!empty($discountData['is_active']));
        $discount->is_annual = (!empty($discountData['is_annual']));
        $discount->saveOrFail();

        $this->setClassification($discount, OfferClassification::class, $offerTx, $discountData['offer']['classifications']);
        $this->setMeta($discount, OfferMeta::class, $offerTx, $discountData['offer']['metas']);

        $this->setClassification($discount, DiscountClassification::class, $typeTx, $discountData['classifications']);
        $this->setMeta($discount, DiscountMeta::class, $typeTx, $discountData['metas']);

        $dateRangeIds = [];
        if (!empty($discountData['date_ranges'])) {
            foreach ($discountData['date_ranges'] as $dateRangeData) {
                $dateRangeIds[] = OrganizationDateRange::setByData($discountData['organization_id'], $dateRangeData)->id;
            }
        } elseif (!empty($discountData['date_range_relative_ids'])) {
            foreach ($discountData['date_range_relative_ids'] as $dateRangeRelativeId) {
                $dateRangeIds[] = $dateRangeRelativeIds[$dateRangeRelativeId];
            }
        }
        foreach ($dateRangeIds as $dateRangeId) {
            $this->setDiscountPeriod($discount->id, $dateRangeId);
        }

        return $discount;
    }

    /**
     * Sets combinations for discounts
     * 
     * @param array $data Combination data with relative discount ids
     * @param array $discountIds list of real discounts
     * @return DiscountCombination
     */
    private function setCombinations($data, $discountIds) {
        $insertableDiscountIds = [];
        foreach ($data as $relativeDiscountId) {
            $insertableDiscountIds[] = $discountIds[$relativeDiscountId];
        }

        return DiscountCombination::set($insertableDiscountIds[0], $insertableDiscountIds[1]);
    }

    /**
     * Sets classification data to a discount
     * 
     * @param Discount $discount
     * @param string $className classification class name
     * @param Taxonomy $parentTx parent taxonomy
     * @param array $classificationData data to set
     */
    private function setClassification(Discount $discount, string $className, Taxonomy $parentTx, $classificationData) {
        $classificationTx = Taxonomy::getTaxonomy('classification', $parentTx->id);

        foreach ($classificationData as $value) {
            $valueTx = Taxonomy::getTaxonomy($value, $classificationTx->id);
            $meta = new $className();
            $meta->discount_id = $discount->id;
            $meta->classification_taxonomy_id = $classificationTx->id;
            $meta->value_taxonomy_id = $valueTx->id;
            $meta->saveOrFail();
        }
    }

    /**
     * Sets meta data to a discount
     * 
     * @param Discount $discount
     * @param string $className classification class name
     * @param Taxonomy $parentTx parent taxonomy
     * @param array $metaData
     */
    private function setMeta(Discount $discount, string $className, Taxonomy $parentTx, $metaData) {
        $metaTx = Taxonomy::getTaxonomy('meta', $parentTx->id);

        foreach ($metaData as $name => $value) {
            $taxonomy = Taxonomy::getTaxonomy($name, $metaTx->id);

            switch ($name) {
                case 'restricted_to_device_ids':
                    $value = $this->getRealDeviceIds($value);
                    break;
                case 'recalculate_using_meal_plan':
                    $value = $this->getRealMealPlanIds([$value])[0];
                    break;
                case 'restricted_to_meal_plan_ids':
                    $value = implode(',', $this->getRealMealPlanIds($value));
                    break;
                case 'participating_organization_ids':
                case 'recalculate_using_products':
                    $value = implode(',', $value);
                    break;
            }
            
            $meta = new $className();
            $meta->discount_id = $discount->id;
            $meta->taxonomy_id = $taxonomy->id;
            $meta->value = $value;
            $meta->saveOrFail();
        }
    }

    /**
     * Creates a new discount period
     * 
     * @param int $discountId
     * @param int $dateRangeId
     * @return DiscountPeriod
     */
    private function setDiscountPeriod(int $discountId, int $dateRangeId) {
        $period = new DiscountPeriod([
            'discount_id' => $discountId,
            'organization_date_range_id' => $dateRangeId,
        ]);
        $period->saveOrFail();
        return $period;
    }

    /**
     * Translates relative device ids to real device ids.
     * Input can be an array, an integer or a comma separated list of ids as string.
     * Return type is set according to input type.
     * 
     * @param string|int|array $value
     * @return string|int|array
     */
    private function getRealDeviceIds($value) {
        if (is_string($value)) {
            $values = array_map('trim', explode(',', $value));
        } elseif (is_int($value)) {
            $values = [$value];
        } else {
            $values = $value;
        }
        $deviceIds = Device::orderBy('id')->select('id')->pluck('id');
        $result = [];
        foreach ($values as $relative_id) {
            if (isset($deviceIds[$relative_id - 1])) {
                $result[] = $deviceIds[$relative_id - 1];
            }
        }
        if (is_string($value)) {
            return implode(',', $result);
        } elseif (is_int($value)) {
            return $result[0];
        } else {
            return $result;
        }
    }

    /**
     * Translates meal plan ids to real ids
     * 
     * @param array $values
     * @return array
     */
    private function getRealMealPlanIds($values) {
        $mealPlans = MealPlan::getMealPlanNames();
        return array_keys(array_intersect($mealPlans, $values));
    }

    /**
     * Sort discounts in an organization by predefined sort order
     * 
     * @param int $organizationId
     */
    public function updateOrganizationDiscountPriorities(int $organizationId) {

        $sampleDiscount = PriceModifier::organization($organizationId)->first();
        $siblings = $sampleDiscount->findSiblingsInOrder(true);

        foreach (PriceModifier::sortbyPriority($siblings) as $idx => $siblingDiscount) {
            $siblingDiscount->priority = $idx + 1;
            $siblingDiscount->save();
        }
    }
}

